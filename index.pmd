% Demo 2 - NP-Completeness
% Jon Craton
% [![Build Status](https://travis-ci.org/jncraton/csc705-np-complete.svg?branch=master)](https://travis-ci.org/jncraton/csc705-np-complete) [![GitHub last commit](https://img.shields.io/github/last-commit/jncraton/csc705-np-complete.svg)](https://github.com/jncraton/csc705-np-complete)

[Rendered Output](https://jncraton-demo2-np-complete.netlify.com)

3SAT reduces to CLIQUE
======================

----

The basic idea is to convert the solutions to the 3SAT problem to cliques that can be found using algorithms for the CLIQUE problem.

Let ϕ be an expression with k clauses as follows:

ϕ = (a₁ ∨ b₁ ∨ c₁) ∧ (a₂ ∨ b₂ ∨ c₂) … ∧ (aₖ ∨ bₖ ∨ cₖ)

We can convert this expression to a graph G as follows:

A group of nodes is created for each clause in ϕ. Each node represents a literal in the clause. So, for 3SAT each group will be a triple. We will have k triples, where k is the number of clauses in ϕ as shown above.

We then construct graph edges connecting all nodes except:

1. No edges connect nodes in the same triple.
2. No edges connect nodes with contradictory labels (a₁ would not connect to ¬a₁).

Consider the case when ϕ is satisfiable. Select a value that satisfies its clause for each triple in G. These nodes will form a k-clique. Each node will be from a different triple and non-contradictory based on our construction.

∴ G will have a k-clique if ϕ is satisfiable.

Consider the case when G has a k-clique. Each node in the clique will represent a different triple based on our construction. We can set boolean values for each node based on their labels. These values will not contradict, and each will satisfy its clause based on our constructions.

∴ ϕ is satisfiable if G has a k-clique.

∴ G will have a k-clique if and only if ϕ is satisfiable.

- Sipser, Michael. Introduction to the Theory of Computation. Vol. 2. Boston: Thomson Course Technology, 2006.
- https://en.wikipedia.org/wiki/Boolean_satisfiability_problem#3-satisfiability

Hamilton Path reduces to Longest Path
=====================================

----

The basic idea for this proof is to show that Longest Path is NP-Complete by demonstrating that it is NP-hard via a reduction from Hamilton Path.

A Hamilton path is one that visits each vertex exactly once. We can see that the Hamilton Path Problem is trivially related to the Longest Path Problem because if we find that the longest path has a length of n-1 where n is the number of nodes, the longest path is a Hamilton path. Consider these two cases:

1. Graph G has a Hamilton Path - In this case the Longest Path algorithm will correctly return the longest path and therefore Hamilton Path as its result.
2. Graph G does not have a Hamilton Path - In this case the Longest Path algorithm will produce a path of length less than n-1.

∴ The length of the longest path in G will be n-1 if and only if G has a Hamilton Path.

----

- https://en.wikipedia.org/wiki/Longest_path_problem
- https://en.wikipedia.org/wiki/Hamiltonian_path_problem
- https://en.wikipedia.org/wiki/Hamiltonian_path
